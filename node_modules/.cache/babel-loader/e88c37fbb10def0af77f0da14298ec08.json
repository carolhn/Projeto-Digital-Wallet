{"ast":null,"code":"import currency from '../reducers/api';\nexport const ACT_EMAIL = 'ACT_EMAIL';\nexport const ACT_CURRENCIES = 'ACT_CURRENCIES';\nexport const ACT_EXPENSE = 'ACT_EXPENSE';\nexport const actEmail = payload => ({\n  type: ACT_EMAIL,\n  payload\n});\nexport const actCurrencies = payload => ({\n  type: ACT_CURRENCIES,\n  payload\n});\nexport const actExpense = expenses => ({\n  type: ACT_EXPENSE,\n  payload: expenses\n});\nexport function fetchApi() {\n  return async dispatch => {\n    const currencys = await currency(); //  const URL = await fetch('https://economia.awesomeapi.com.br/json/all');\n    // const result = await URL.json();\n\n    const resultado = Object.keys(currencys).filter(e => e !== 'USDT');\n    return dispatch(actCurrencies(resultado));\n  };\n}\nexport const fetchExpense = state => async dispatch => {\n  const response = await currency;\n  const result = await response.json();\n  delete result.USDT;\n  dispatch(actExpense({ ...state,\n    exchangeRate: result\n  }));\n}; // 1° - vamos criar uma action( com minha payload ); // vamos carregar meu caminhãozinho com um objeto\n// 2° - chamo no component(dispatch (minha função(state que quero levar para reducer)); // vou carregar meu caminhãozinho (dispech) com o que eu preciso levar para reducer\n// 3° - No reducer eu recebo o state do componnete // o caminhão tras as informações para eu atualizar na no reducer","map":{"version":3,"names":["currency","ACT_EMAIL","ACT_CURRENCIES","ACT_EXPENSE","actEmail","payload","type","actCurrencies","actExpense","expenses","fetchApi","dispatch","currencys","resultado","Object","keys","filter","e","fetchExpense","state","response","result","json","USDT","exchangeRate"],"sources":["/home/carol/Projetos/sd-024-b-project-trybewallet/src/redux/actions/index.js"],"sourcesContent":["import currency from '../reducers/api';\n\nexport const ACT_EMAIL = 'ACT_EMAIL';\nexport const ACT_CURRENCIES = 'ACT_CURRENCIES';\nexport const ACT_EXPENSE = 'ACT_EXPENSE';\n\nexport const actEmail = (payload) => ({ type: ACT_EMAIL, payload });\nexport const actCurrencies = (payload) => ({ type: ACT_CURRENCIES, payload });\nexport const actExpense = (expenses) => ({ type: ACT_EXPENSE, payload: expenses });\n\nexport function fetchApi() {\n  return async (dispatch) => {\n    const currencys = await currency();\n    //  const URL = await fetch('https://economia.awesomeapi.com.br/json/all');\n    // const result = await URL.json();\n    const resultado = Object.keys(currencys).filter((e) => e !== 'USDT');\n    return dispatch(actCurrencies(resultado));\n  };\n}\n\nexport const fetchExpense = (state) => async (dispatch) => {\n  const response = await (currency);\n  const result = await response.json();\n  delete result.USDT;\n  dispatch(actExpense({ ...state, exchangeRate: result }));\n};\n\n// 1° - vamos criar uma action( com minha payload ); // vamos carregar meu caminhãozinho com um objeto\n\n// 2° - chamo no component(dispatch (minha função(state que quero levar para reducer)); // vou carregar meu caminhãozinho (dispech) com o que eu preciso levar para reducer\n\n// 3° - No reducer eu recebo o state do componnete // o caminhão tras as informações para eu atualizar na no reducer\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iBAArB;AAEA,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,QAAQ,GAAIC,OAAD,KAAc;EAAEC,IAAI,EAAEL,SAAR;EAAmBI;AAAnB,CAAd,CAAjB;AACP,OAAO,MAAME,aAAa,GAAIF,OAAD,KAAc;EAAEC,IAAI,EAAEJ,cAAR;EAAwBG;AAAxB,CAAd,CAAtB;AACP,OAAO,MAAMG,UAAU,GAAIC,QAAD,KAAe;EAAEH,IAAI,EAAEH,WAAR;EAAqBE,OAAO,EAAEI;AAA9B,CAAf,CAAnB;AAEP,OAAO,SAASC,QAAT,GAAoB;EACzB,OAAO,MAAOC,QAAP,IAAoB;IACzB,MAAMC,SAAS,GAAG,MAAMZ,QAAQ,EAAhC,CADyB,CAEzB;IACA;;IACA,MAAMa,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBI,MAAvB,CAA+BC,CAAD,IAAOA,CAAC,KAAK,MAA3C,CAAlB;IACA,OAAON,QAAQ,CAACJ,aAAa,CAACM,SAAD,CAAd,CAAf;EACD,CAND;AAOD;AAED,OAAO,MAAMK,YAAY,GAAIC,KAAD,IAAW,MAAOR,QAAP,IAAoB;EACzD,MAAMS,QAAQ,GAAG,MAAOpB,QAAxB;EACA,MAAMqB,MAAM,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAArB;EACA,OAAOD,MAAM,CAACE,IAAd;EACAZ,QAAQ,CAACH,UAAU,CAAC,EAAE,GAAGW,KAAL;IAAYK,YAAY,EAAEH;EAA1B,CAAD,CAAX,CAAR;AACD,CALM,C,CAOP;AAEA;AAEA"},"metadata":{},"sourceType":"module"}