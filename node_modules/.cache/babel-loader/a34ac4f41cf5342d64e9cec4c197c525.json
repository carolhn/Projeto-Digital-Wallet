{"ast":null,"code":"export const ACT_EMAIL = 'ACT_EMAIL';\nexport const ACT_CURRENCIES = 'ACT_CURRENCIES';\nexport const ACT_ERRO = 'ACT_ERRO';\nexport const actEmail = payload => ({\n  type: ACT_EMAIL,\n  payload\n});\nexport const actCurrencies = payload => ({\n  type: ACT_CURRENCIES,\n  payload\n});\nexport const actErro = payload => ({\n  type: ACT_ERRO,\n  payload\n}); // export const fetchApi = () => async (dispatch) => {\n//   dispatch(request);\n//   try {\n//     const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n//     const data = await response.json();\n//     const dataResult = Object.keys(data).filter((e) => e !== 'USDT');\n//     dispatch(success(dataResult));\n//   } catch (error) {\n//     dispatch(actionError(error));\n//   }\n// };\n\nexport function fetchApi() {\n  return async dispatch => {\n    try {\n      const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const result = await response.json();\n      const resultado = Object.keys(result).filter(e => e !== 'USDT');\n      return dispatch(actCurrencies(resultado));\n    } catch (error) {\n      dispatch(actErro(error));\n    }\n  };\n} // 1° - vamos criar uma action( com minha payload ); // vamos carregar meu caminhãozinho com um objeto\n// 2° - chamo no component(dispatch (minha função(state que quero levar para reducer)); // vou carregar meu caminhãozinho (dispech) com o que eu preciso levar para reducer\n// 3° - No reducer eu recebo o state do componnete // o caminhão tras as informações para eu atualizar na no reducer","map":{"version":3,"names":["ACT_EMAIL","ACT_CURRENCIES","ACT_ERRO","actEmail","payload","type","actCurrencies","actErro","fetchApi","dispatch","response","fetch","result","json","resultado","Object","keys","filter","e","error"],"sources":["/home/carol/Projetos/sd-024-b-project-trybewallet/src/redux/actions/index.js"],"sourcesContent":["export const ACT_EMAIL = 'ACT_EMAIL';\nexport const ACT_CURRENCIES = 'ACT_CURRENCIES';\nexport const ACT_ERRO = 'ACT_ERRO';\n\nexport const actEmail = (payload) => ({ type: ACT_EMAIL, payload });\n\nexport const actCurrencies = (payload) => ({\n  type: ACT_CURRENCIES, payload });\n\nexport const actErro = (payload) => ({ type: ACT_ERRO, payload });\n\n// export const fetchApi = () => async (dispatch) => {\n//   dispatch(request);\n//   try {\n//     const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n//     const data = await response.json();\n//     const dataResult = Object.keys(data).filter((e) => e !== 'USDT');\n//     dispatch(success(dataResult));\n//   } catch (error) {\n//     dispatch(actionError(error));\n//   }\n// };\n\nexport function fetchApi() {\n  return async (dispatch) => {\n    try {\n      const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n      const result = await response.json();\n      const resultado = Object.keys(result).filter((e) => e !== 'USDT');\n      return dispatch(actCurrencies(resultado));\n    } catch (error) {\n      dispatch(actErro(error));\n    }\n  };\n}\n\n// 1° - vamos criar uma action( com minha payload ); // vamos carregar meu caminhãozinho com um objeto\n\n// 2° - chamo no component(dispatch (minha função(state que quero levar para reducer)); // vou carregar meu caminhãozinho (dispech) com o que eu preciso levar para reducer\n\n// 3° - No reducer eu recebo o state do componnete // o caminhão tras as informações para eu atualizar na no reducer\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AAEP,OAAO,MAAMC,QAAQ,GAAIC,OAAD,KAAc;EAAEC,IAAI,EAAEL,SAAR;EAAmBI;AAAnB,CAAd,CAAjB;AAEP,OAAO,MAAME,aAAa,GAAIF,OAAD,KAAc;EACzCC,IAAI,EAAEJ,cADmC;EACnBG;AADmB,CAAd,CAAtB;AAGP,OAAO,MAAMG,OAAO,GAAIH,OAAD,KAAc;EAAEC,IAAI,EAAEH,QAAR;EAAkBE;AAAlB,CAAd,CAAhB,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,QAAT,GAAoB;EACzB,OAAO,MAAOC,QAAP,IAAoB;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAAD,CAA5B;MACA,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;MACA,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAApB,CAA4BC,CAAD,IAAOA,CAAC,KAAK,MAAxC,CAAlB;MACA,OAAOT,QAAQ,CAACH,aAAa,CAACQ,SAAD,CAAd,CAAf;IACD,CALD,CAKE,OAAOK,KAAP,EAAc;MACdV,QAAQ,CAACF,OAAO,CAACY,KAAD,CAAR,CAAR;IACD;EACF,CATD;AAUD,C,CAED;AAEA;AAEA"},"metadata":{},"sourceType":"module"}